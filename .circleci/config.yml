version: 2.1
orbs:
  docker: circleci/docker@1.5.0
jobs:
  checkout_code:
    docker:
      - image: circleci/ruby:2.5
    working_directory: ~/app
    steps:
      - restore_cache:
          name: Restore code from cache
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          name: Save code cache
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  bundle:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages for Building
          command: |
            sudo apt-get install -y software-properties-common build-essential make apt-utils cmake nodejs default-libmysqlclient-dev
      - restore_cache:
          name: Restore bundle from cache
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Install dependencies
          command: |
            bundle install --path=vendor/bundle --jobs=4 --retry=3 --binstubs
            #bundle binstubs --path=vendor/bundle rubocop --force
      - save_cache:
          name: Save bundle cache
          key: v2-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/app/vendor/bundle
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  lint:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
    working_directory: ~/app
    environment:
      BUNDLE_PATH: vendor/bundle
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          name: Restore bundle from cache
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Bundle install
          command: |
            bundle install --path=vendor/bundle --jobs=4 --retry=3 --binstubs
      - run:
          name: Run Rubocop
          command: bundle exec rubocop
  test:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
        environment:
          BLAZEGRAPH_URL: http://localhost:8080/bigdata/namespace/kb/sparql
          CVM_ADAPTER: mysql2
          CVM_DB: cvm_test
          CVM_DB_USERNAME: monkeys
          CVM_DB_PASSWORD: monkeys
          CVM_DB_HOST: localhost
          CVM_DB_PORT: 3306
          CVM_SECRET_KEY_BASE:
          CVM_SOLR_URL: http://localhost:8985/solr/cvm-test
          CVM_TRIPLESTORE_TYPE: blazegraph
          CVM_TRIPLESTORE_URL: http://ci-test:8080/bigdata/namespace/kb/sparql
          HONEYCOMB_DATASET: cvm-test
          HONEYCOMB_DEBUG: 'true'
          HONEYCOMB_WRITEKEY: buzzzzzzzzzzzzzzzz
          HONEYCOMB_SERVICE: cvm-test
          RAILS_ENV: test
      - image: circleci/mysql:5.7.22
        environment:
          MYSQL_ROOT_PASSWORD: monkeys
          MYSQL_USER: monkeys
          MYSQL_PASSWORD: monkeys
          MYSQL_DATABASE: cvm_test
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages
          command: |
            sudo apt-get update -qq
            sudo apt-get upgrade -qq
            sudo apt-get install -y -f software-properties-common build-essential default-libmysqlclient-dev nodejs make apt-utils nodejs cmake apt-utils openjdk-8-jre-headless ca-certificates-java openjdk-8-jre openjdk-8-jdk openjdk-8-jdk-headless
            sudo update-alternatives --config java
      - run:
          name: phantomjs
          command: |
            sudo wget -P /opt/phantomjs/ https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
            sudo bzip2 -d /opt/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2
            sudo tar -xvf /opt/phantomjs/phantomjs-2.1.1-linux-x86_64.tar -C /opt/phantomjs
            sudo cp /opt/phantomjs/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/bin/phantomjs
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Bundle update srsly again
          command: bundle install --without production staging --jobs=4 --retry=3 --binstubs
      - run:
          name: Start blazegraph
          command: bundle exec rake triplestore_adapter:blazegraph:reset
      - run:
          name: Create and load MySQL data
          command: bundle exec rake db:create db:migrate db:test:prepare --trace
      - run:
          name: Run Tests
          command: |
            bundle exec rspec --profile 10 \
                              --format documentation \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_artifacts:
          path: coverage
          destination: coverage
      - store_test_results:
          path: /tmp/circle-junit
  build_and_push_beavernetes:
    parameters:
      repo:
        type: string
        default: ''
      environment:
        type: string
        default: 'production'
    executor:
      name: 'docker/docker'
    environment:
      DOCKER_LOGIN: admin
      DOCKER_PASSWORD: admin
      RAILS_ENV: production
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate deployed version
          command: |
            export GIT_SHORT_HASH=$(git rev-parse --short HEAD)
            export DATETIME=$(date "+%Y%m%d%H%M%S")
            echo export TAG="$DATETIME-$GIT_SHORT_HASH" >> $BASH_ENV
            echo export DEPLOYED_VERSION="$DATETIME-$GIT_SHORT_HASH" >> $BASH_ENV
      - setup_remote_docker:
          version: 20.10.2
      - docker/check:
          registry: registry.library.oregonstate.edu
      - docker/build:
          registry: registry.library.oregonstate.edu
          image: cvm_rails
          tag: $TAG
          extra_build_args: --build-arg RAILS_ENV=<< parameters.environment >> --build-arg DEPLOYED_VERSION=$DEPLOYED_VERSION
      - docker/push:
          registry: registry.library.oregonstate.edu
          image: cvm_rails
          tag: $TAG
workflows:
  ci:
    jobs:
      - checkout_code
      - bundle:
          requires:
            - checkout_code
      - lint:
          requires:
            - bundle
      - test:
          requires:
            - lint
      - build_and_push_beavernetes:
          name: build_and_push_beavernetes
          requires:
            - test
          repo: cvm_rails
          environment: production
