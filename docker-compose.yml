version: '3'

volumes:
  app:
  blazegraph:
  db:
  solr:
  bundled:

networks:
  external:
  internal:

services:
  ##
  # Basic image for the rails application server, see Dockerfile
  app: &app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/data
      - app:/data/tmp/uploads
      - bundled:/usr/local/bundle
    tmpfs:
      - /data/log
    networks:
      internal:
      external:

  ##
  # Run the application in the currently set RAILS_ENV, set to development by default in the .env file.
  server: &server
    <<: *app
    environment:
      - RAILS_ENV=${RAILS_ENV}
      - CVM_SOLR_URL=http://localhost:8983/solr/default
      - CVM_TRIPLESTORE_URL=http://localhost:9999/blazegraph/namespace/development/sparql
      - BLAZEGRAPH_URL=http://localhost:9999/blazegraph

    # Ideally we will replace this set of commands with an entrypoint script that checks to see if these
    # have been run already have been run and if so it just starts the server without the first three commands
    # taking time to run.
    command: >
      bash -c "bundle exec rake triplestore_adapter:blazegraph:reset &&
               ./build/entrypoint.sh && 
               rake git_dev:create_dev_repo &&
               rake sunspot:solr:start &&
               bundle exec puma -C config/puma/development.rb --dir /data --pidfile /data/tmp/pids/puma.pid -b tcp://0.0.0.0:3000"
    depends_on:
      - db
      - db_test
      - solr
      - blazegraph
    expose:
      - 3000

  ##
  # Test environment for application
  test: &test
    <<: *server
    environment:
      - RAILS_ENV=test
      - CVM_SOLR_URL=http://localhost:8983/solr/default
      - CVM_TRIPLESTORE_URL=http://localhost:9999/blazegraph/namespace/test/sparql
      - BLAZEGRAPH_URL=http://localhost:9999/blazegraph
    depends_on:
      - db_test
      - solr-test
      - blazegraph
    command: >
      bash -c "bundle exec rake triplestore_adapter:blazegraph:reset &&
               ./build/entrypoint.sh && 
               rake git_dev:create_dev_repo &&
               bundle exec puma -b tcp://0.0.0.0:3001 -e test"
    expose:
      - 3001

  ##
  # Blazegraph server
  blazegraph-image: &blazegraph-image
    image: lyrasis/blazegraph:2.1.5
    expose:
      - 8080
    networks:
      internal:
    command: bash -c "chmod a+wx /data && ./entrypoint.sh"
  blazegraph:
    <<: *blazegraph-image
    volumes:
      - blazegraph:/data
      - ./config/blazegraph/RWStore.properties:/data/RWStore.properties

  ##
  # Run an instance of MySQL with a database named 'development' for running specs. See config/database.yml
  db:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=development
    volumes:
      - db:/var/lib/mysql
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      internal:

  ##
  # Run an instance of MySQL with a database named 'test' for running specs. See config/database.yml. Has no volume
  # and doesn't intend on persisting data across sessions.
  db_test:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=test
    volumes:
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      internal:

  solr: &solr
    image: solr:alpine
    expose:
      - 8983
    volumes:
      - solr:/opt/solr/server/solr/mycores
      - ./solr/conf:/opt/solr/server/solr/configsets/_default/conf
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - hydra-${RAILS_ENV}
    networks:
      internal:

  ##
  # Run SOLR, precreating a core related to the RAILS_ENV currently set, persists data across sessions in a named volume.
  solr-test:
    <<: *solr
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - hydra-test

  ##
  # Load balancer, although not strictly necessary.. would allow the app to work with regular port 80
  lb:
    image: dockercloud/haproxy:1.5.3
    links:
      - server
    environment:
      - DOCKER_TLS_VERIFY
      - DOCKER_HOST
      - DOCKER_CERT_PATH
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # You must uncomment this line if and only if you are running docker-machine
      # - $DOCKER_CERT_PATH:$DOCKER_CERT_PATH
    networks:
      internal:
      external: